// Copyright (c) 2015, Lucas Domanico
var zekai = (function() { var self = {};var grammar = self.grammar = function() { return (function() { var self = {};var w = self.w = regex('^([ \\t\\r\\n,;]|(\\#.*)|(\\\/\/.*))*'); var id = self.id = regex('^[\\$A-Za-z_][\\$A-Za-z_\\d]*','id'); var num = self.num = regex('^((0[xX][0-9a-fA-F]+)|(\\d+(\\.\\d+)?))','num'); var str = self.str = regex('^(["\'])((\\\\(\\1|\\\\))|.)*?\\1','str'); var array = self.array = rule(function() { return [token('['),w,list(expr,w),w,token(']')]; },'array'); var struct = self.struct = rule(function() { return [token('{'),w,list(def,w),w,token('}')]; },'struct'); var lambda = self.lambda = rule(function() { return [token('\\'),w,list(def,w),w,Case([init,inline,block])]; },'lambda'); var expr = self.expr = rule(function() { return [list(Case([not,neg])),Case([lit,Let,ref,par]),list(Case([field,index,call])),list(Case([iif,arith]))]; },'expr'); var lit = self.lit = rule(function() { return [Case([num,str,array,struct,lambda])]; }); var def = self.def = rule(function() { return [Case([set,arg])]; }); var set = self.set = rule(function() { return [id,w,Case([Var,func])]; },'def'); var arg = self.arg = rule(function() { return [id]; },'def'); var ref = self.ref = rule(function() { return [id]; },'ref'); var par = self.par = rule(function() { return [token('('),w,list(Case([local,expr]),w),w,token(')')]; },'par'); var field = self.field = rule(function() { return [token('.'),w,id]; },'$field'); var index = self.index = rule(function() { return [token('['),w,expr,w,token(']')]; },'$index'); var call = self.call = rule(function() { return [token('('),w,list(expr,w),w,token(')')]; },'$call'); var Var = self.Var = rule(function() { return [token('='),w,expr]; }); var func = self.func = rule(function() { return [token('('),w,list(def,w),w,token(')'),w,Case([init,inline,block])]; },'lambda'); var neg = self.neg = rule(function() { return [token('~')]; },'$neg'); var not = self.not = rule(function() { return [token('!')]; },'$not'); var iif = self.iif = rule(function() { return [w,token('?'),w,expr,w,expr]; },'$iif'); var arith = self.arith = rule(function() { return [w,Case(op('?: <- += -= *= /= %= ^= + - * / % ^ << >> == != >= <= > < ||| &&& || && | &','$op')),w,expr]; },'$arith'); var inline = self.inline = rule(function() { return [token(':'),w,expr]; },'inline'); var block = self.block = rule(function() { return [token('{'),w,list(stat,w),w,token('}')]; },'block'); var local = self.local = rule(function() { return [id,w,Case([Var,func])]; },'local'); var Let = self.Let = rule(function() { return [id,w,Case([Var,func]),w,expr]; },'let'); var init = self.init = rule(function() { return [token('@')]; },'init'); var stat = self.stat = rule(function() { return [Case([local,expr])]; }); return self; })(); }; var ir = self.ir = function(tag,text,args,pos) { return tag==='id'?words.indexOf(text)>=0?head(text).toUpperCase()+tail(text):text:tag==='num'||tag==='str'?text:tag==='array'?'['+args.join(',')+']':tag==='struct'?'(function() { var self = {};'+args[0].map(function(e) { return 'var '+e.id+' = self.'+e.id+' = '+e.expr+'; '; }).join('')+'return self; })()':tag==='lambda'?args[1]?'function('+args[0].map(function(e) { return e.id; }).join(',')+') { '+args[0].map(function(e) { return e.expr?'if('+e.id+'===undefined)'+e.id+'='+e.expr+'; ':''; }).join('')+args[1]+' }':ir('lambda','',[args[0].map(function(e) { return (function() { var self = {};var id = self.id = e.id+'$'; var expr = self.expr = ''; return self; })(); }),'return '+ir('struct','',[args[0].map(function(e) { return (function() { var self = {};var id = self.id = e.id; var expr = self.expr = e.id+'$!==undefined?'+e.id+'$:'+(e.expr?e.expr:'undefined._'); return self; })(); })])+';']):tag==='inline'?'return '+args[0]+';':tag==='block'?size(args[0])===1?'return '+args[0][0]+';':take(args[0]).map(function(e) { return e+'; '; }).join('')+'return '+last(args[0])+';':tag==='local'?'var '+args[0]+' = '+args[1]:tag==='let'?'(function('+args[0]+') { return '+args[2]+'; })('+args[1]+')':tag==='ref'?args[0]:tag==='expr'?args[3].reduce(function(a,b) { return b(a); },args[2].reduce(function(a,b) { return b(a); },args[0].reduce(function(a,b) { return b(a); },args[1]))):tag==='$field'?args[1]+'.'+args[0]:tag==='$index'?args[1]+'['+args[0]+']':tag==='$call'?args[1]+'('+args[0].join(',')+')':tag==='$neg'?'-'+args[0]:tag==='$not'?'!'+args[0]:tag==='$arith'?args[0]([args[2],args[1]]):tag==='$op'?text==='?:'?args[0][0]+'?'+args[0][1]+':false':text==='^'?args[0][0]+'.concat('+args[0][1]+')':args[0][0]+(text==='<-'?'=':text==='&'?'&&':text==='|'?'||':text==='|||'?'|':text==='&&&'?'&':text==='=='?'===':text==='!='?'!==':text)+args[0][1]:tag==='$bool'?args[0]([args[2],args[1]]):tag==='$iif'?args[2]+'?'+args[0]+':'+args[1]:tag==='init'?'':tag==='par'?size(args[0])==1?'('+args[0][0]+')':'(function() { '+ir('block','',[args[0]],pos)+' })()':abort(); }; var compile = self.compile = function(ast,target) { if(target===undefined)target=ir; return (function(args) { return !ast.tag?args:ast.tag==='def'?(function() { var self = {};var id = self.id = args[0]; var expr = self.expr = size(args)>1?args[1]:''; return self; })():ast.tag[0]==='$'?function(e,post) { if(post===undefined)post=true; return target(ast.tag,ast.text,args.concat([e,post])); }:target(ast.tag,ast.text,args,ast.pos); })(ast.data.map(function(e) { return compile(e,target); })); }; var module = self.module = function(code) { return compile(grammar().struct('{'+code+'}')); }; var words = self.words = ('break continue else for if return while case const catch debugger default delete do finally '+'function in instanceof new switch this throw try typeof var void with class enum export extends '+'import super implements interface let package private protected public static yield').split(' '); var many = self.many = ''; var skip = self.skip = ' '; var ast = self.ast = function(pos$,tag$,data$,length$,text$) { return (function() { var self = {};var pos = self.pos = pos$!==undefined?pos$:0; var tag = self.tag = tag$!==undefined?tag$:skip; var data = self.data = data$!==undefined?data$:[]; var length = self.length = length$!==undefined?length$:-1; var text = self.text = text$!==undefined?text$:''; return self; })(); }; var leaf = self.leaf = function(pos,tag,text,length) { return ast(pos,tag,[],length,text); }; var fail = self.fail = function(pos) { return ast(pos); }; var isfail = self.isfail = function(ast) { return ast.length===-1; }; var push = self.push = function(ast) { return ast.tag===skip?ast.data:[ast]; }; var pass = self.pass = function(s,i) { if(i===undefined)i=0; return ast(i,skip,[],0); }; var op = self.op = function(ops,name) { return ops.split(' ').map(function(op) { return token(op,name); }); }; var regex = self.regex = function(re,name) { if(name===undefined)name=skip; return function(s,i) { if(i===undefined)i=0; return (function(e) { return e?leaf(i,name,e[0],size(e[0])):fail(i); })(s.substr(i).match(RegExp(re))); }; }; var token = self.token = function(chars,name) { if(name===undefined)name=skip; return function(s,i) { if(i===undefined)i=0; return s.substr(i,size(chars))===chars?leaf(i,name,chars,size(chars)):fail(i); }; }; var Case = self.Case = function(rules) { return function(s,i) { if(i===undefined)i=0; return fold(pair(fail(i),true),rules,function(q,r) { return q.second?(function(e) { return pair(e,isfail(e)); })(r(s,i)):q; }).first; }; }; var rule = self.rule = function(rules,name) { if(name===undefined)name=skip; return function(s,i) { if(i===undefined)i=0; return (function(e) { return e.second?ast(i,name,e.first,e.third):head(e.first); })(fold(triple([],true,0),rules(),function(q,r) { return q.second?(function(w) { return isfail(w)?triple([w],false,0):triple(q.first.concat(push(w)),true,q.third+w.length); })(r(s,i+q.third)):q; })); }; }; var list = self.list = function(rule,sep) { if(sep===undefined)sep=pass; return function(s,i) { if(i===undefined)i=0; return (function(e) { return isfail(e)?ast(i,many,[],0):(function(a) { return isfail(a)?ast(i,many,push(e),e.length):(function(b) { return ast(i,many,push(e).concat(b.data),e.length+a.length+b.length); })(list(rule,sep)(s,i+e.length+a.length)); })(sep(s,i+e.length)); })(rule(s,i)); }; }; var pair = self.pair = function(first$,second$) { return (function() { var self = {};var first = self.first = first$!==undefined?first$:undefined._; var second = self.second = second$!==undefined?second$:undefined._; return self; })(); }; var triple = self.triple = function(first$,second$,third$) { return (function() { var self = {};var first = self.first = first$!==undefined?first$:undefined._; var second = self.second = second$!==undefined?second$:undefined._; var third = self.third = third$!==undefined?third$:undefined._; return self; })(); }; var fold = self.fold = function(t,v,f,i) { if(i===undefined)i=0; return i<size(v)?fold(f(t,v[i],i),v,f,i+1):t; }; var size = self.size = function(v) { return v.length; }; var take = self.take = function(v,n) { if(n===undefined)n=-1; return v.slice(0,n); }; var tail = self.tail = function(v,n) { if(n===undefined)n=1; return v.slice(n); }; var head = self.head = function(v) { return v[0]; }; var last = self.last = function(v) { return v[size(v)-1]; }; return self; })();